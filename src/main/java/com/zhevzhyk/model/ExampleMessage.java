/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zhevzhyk.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A schema for publishing messages. */
@org.apache.avro.specific.AvroGenerated
public class ExampleMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1847026667261500092L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExampleMessage\",\"namespace\":\"com.zhevzhyk.model\",\"doc\":\"A schema for publishing messages.\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.\",\"logicalType\":\"uuid\"},{\"name\":\"format\",\"type\":{\"type\":\"enum\",\"name\":\"Format\",\"symbols\":[\"UNKNOWN\",\"UNSPECIFIED\"],\"default\":\"UNKNOWN\"},\"doc\":\"The format. This field is mandatory.\"},{\"name\":\"sourceApplication\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The identifier of the entity generating the record. This field is optional.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ExampleMessage> ENCODER =
      new BinaryMessageEncoder<ExampleMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ExampleMessage> DECODER =
      new BinaryMessageDecoder<ExampleMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ExampleMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ExampleMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ExampleMessage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ExampleMessage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ExampleMessage from a ByteBuffer. */
  public static ExampleMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference. */
   private java.lang.String uuid;
  /** The format. This field is mandatory. */
   private com.zhevzhyk.model.Format format;
  /** The identifier of the entity generating the record. This field is optional. */
   private java.lang.String sourceApplication;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ExampleMessage() {}

  /**
   * All-args constructor.
   * @param uuid The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
   * @param format The format. This field is mandatory.
   * @param sourceApplication The identifier of the entity generating the record. This field is optional.
   */
  public ExampleMessage(java.lang.String uuid, com.zhevzhyk.model.Format format, java.lang.String sourceApplication) {
    this.uuid = uuid;
    this.format = format;
    this.sourceApplication = sourceApplication;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return format;
    case 2: return sourceApplication;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.String)value$; break;
    case 1: format = (com.zhevzhyk.model.Format)value$; break;
    case 2: sourceApplication = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return The format. This field is mandatory.
   */
  public com.zhevzhyk.model.Format getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * The format. This field is mandatory.
   * @param value the value to set.
   */
  public void setFormat(com.zhevzhyk.model.Format value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'sourceApplication' field.
   * @return The identifier of the entity generating the record. This field is optional.
   */
  public java.lang.String getSourceApplication() {
    return sourceApplication;
  }

  /**
   * Sets the value of the 'sourceApplication' field.
   * The identifier of the entity generating the record. This field is optional.
   * @param value the value to set.
   */
  public void setSourceApplication(java.lang.String value) {
    this.sourceApplication = value;
  }

  /**
   * Creates a new ExampleMessage RecordBuilder.
   * @return A new ExampleMessage RecordBuilder
   */
  public static com.zhevzhyk.model.ExampleMessage.Builder newBuilder() {
    return new com.zhevzhyk.model.ExampleMessage.Builder();
  }

  /**
   * Creates a new ExampleMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ExampleMessage RecordBuilder
   */
  public static com.zhevzhyk.model.ExampleMessage.Builder newBuilder(com.zhevzhyk.model.ExampleMessage.Builder other) {
    return new com.zhevzhyk.model.ExampleMessage.Builder(other);
  }

  /**
   * Creates a new ExampleMessage RecordBuilder by copying an existing ExampleMessage instance.
   * @param other The existing instance to copy.
   * @return A new ExampleMessage RecordBuilder
   */
  public static com.zhevzhyk.model.ExampleMessage.Builder newBuilder(com.zhevzhyk.model.ExampleMessage other) {
    return new com.zhevzhyk.model.ExampleMessage.Builder(other);
  }

  /**
   * RecordBuilder for ExampleMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExampleMessage>
    implements org.apache.avro.data.RecordBuilder<ExampleMessage> {

    /** The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference. */
    private java.lang.String uuid;
    /** The format. This field is mandatory. */
    private com.zhevzhyk.model.Format format;
    /** The identifier of the entity generating the record. This field is optional. */
    private java.lang.String sourceApplication;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zhevzhyk.model.ExampleMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.format)) {
        this.format = data().deepCopy(fields()[1].schema(), other.format);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceApplication)) {
        this.sourceApplication = data().deepCopy(fields()[2].schema(), other.sourceApplication);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ExampleMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zhevzhyk.model.ExampleMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.format)) {
        this.format = data().deepCopy(fields()[1].schema(), other.format);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceApplication)) {
        this.sourceApplication = data().deepCopy(fields()[2].schema(), other.sourceApplication);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.zhevzhyk.model.ExampleMessage.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * The unique identifier of the event. The string has to conform with RFC-4122. This field is mandatory and can be used for reference.
      * @return This builder.
      */
    public com.zhevzhyk.model.ExampleMessage.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * The format. This field is mandatory.
      * @return The value.
      */
    public com.zhevzhyk.model.Format getFormat() {
      return format;
    }

    /**
      * Sets the value of the 'format' field.
      * The format. This field is mandatory.
      * @param value The value of 'format'.
      * @return This builder.
      */
    public com.zhevzhyk.model.ExampleMessage.Builder setFormat(com.zhevzhyk.model.Format value) {
      validate(fields()[1], value);
      this.format = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * The format. This field is mandatory.
      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'format' field.
      * The format. This field is mandatory.
      * @return This builder.
      */
    public com.zhevzhyk.model.ExampleMessage.Builder clearFormat() {
      format = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceApplication' field.
      * The identifier of the entity generating the record. This field is optional.
      * @return The value.
      */
    public java.lang.String getSourceApplication() {
      return sourceApplication;
    }

    /**
      * Sets the value of the 'sourceApplication' field.
      * The identifier of the entity generating the record. This field is optional.
      * @param value The value of 'sourceApplication'.
      * @return This builder.
      */
    public com.zhevzhyk.model.ExampleMessage.Builder setSourceApplication(java.lang.String value) {
      validate(fields()[2], value);
      this.sourceApplication = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceApplication' field has been set.
      * The identifier of the entity generating the record. This field is optional.
      * @return True if the 'sourceApplication' field has been set, false otherwise.
      */
    public boolean hasSourceApplication() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sourceApplication' field.
      * The identifier of the entity generating the record. This field is optional.
      * @return This builder.
      */
    public com.zhevzhyk.model.ExampleMessage.Builder clearSourceApplication() {
      sourceApplication = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ExampleMessage build() {
      try {
        ExampleMessage record = new ExampleMessage();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.format = fieldSetFlags()[1] ? this.format : (com.zhevzhyk.model.Format) defaultValue(fields()[1]);
        record.sourceApplication = fieldSetFlags()[2] ? this.sourceApplication : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ExampleMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<ExampleMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ExampleMessage>
    READER$ = (org.apache.avro.io.DatumReader<ExampleMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
